
---

# 5) GitHub Action — `.github/workflows/release.yml`
This workflow builds on push to `main` and on manual dispatch. It creates a GitHub release using the `package.json` version, then uploads the produced `dist/` files as release assets. It **does not** commit `dist/` back to the repo (recommended) — it attaches the built files to the release so jsDelivr (which reads tags/commits) can still serve files if you also tag/push the source. The workflow will create a tag `v<version>` if it doesn't exist.

Create `.github/workflows/release.yml`:

```yaml
name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Get version
        id: pkg
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Create tag if missing
        id: tag
        run: |
          TAG=v${{ steps.pkg.outputs.VERSION }}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.pkg.outputs.VERSION }}
          release_name: Release v${{ steps.pkg.outputs.VERSION }}
          body: "Automated release for v${{ steps.pkg.outputs.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dist assets
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/devmasterzone_all.min.css
          asset_name: devmasterzone_all.min.css
          asset_content_type: text/css
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload alert js
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/devmasterzone_alert.min.js
          asset_name: devmasterzone_alert.min.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload accordion js
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/devmasterzone_accordion.min.js
          asset_name: devmasterzone_accordion.min.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
